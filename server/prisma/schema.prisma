// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskSource {
  ADMIN
  EMPLOYEE
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  ON_HOLD
}
model User {
  id        String        @id @default(uuid())
  name      String
  email     String        @unique
  password  String
  role      Role
  createdAt DateTime      @default(now())
  // relation back to attendance
  attendances Attendance[]
    // relation back to tasks
  tasks     Task[]        @relation("UserTasks")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Attendance {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   // matches User.id (uuid is a String!)

  day       DateTime
  checkIn   DateTime?
  checkOut  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, day])
}
model Project {
  id        String   @id @default(uuid())
  name      String
  description String?
  status    ProjectStatus @default(ONGOING)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  source      TaskSource @default(ADMIN)
  assignedTo  User?     @relation("UserTasks", fields: [userId], references: [id])
  userId      String?
  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

